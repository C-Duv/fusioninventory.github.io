Fusioninventory Plugin for GLPI - Tasks Redux

[[!toc levels=4]]

# Tasks redux : objectives

This page aims to gather objectives .

* Split and move tasks summary GUI parts into appropriate tab/screen called
  **Monitoring** and **Reporting** (like using native GLPI reporting facilities or
  mReporting optional plugin)
* Rework task summary categories and layout

[[!template id=info text="""
**TODO** We welcome any mockup and propositions.
"""]]

* Add history log on tasks.

* Externalize taskjobs reports in an independant page and base the display of
  this page on what have been done with the Deploy reports status

[[!template  id=info text="""
**TODO**

Add some mockup within this page or linked to another page if there are too
many elements that makes this page unreadable.
"""]]

## TaskJob planification

### server-driven mode (legacy)

Taskjobs are generated like in previous version but Task and TaskJobs are created
and managed separately.

* Split tasks from jobs to simplify the process
    * Create a Jobs management tab outside the tasks
    * We should be able to create Jobs in task management screen (cf. Package interface)
    * Tasks are only considered as crontab-like tasks.
    * Display the jobs list line by line.
    * Create some helper class which helps to list jobs associated to some
      task. For each Jobs linked, we must have:
        * some timeout (or delay) before running a job.
        * regroup every job by starting time.

* JobStates are generated according to their delay and in the resultant order :

        example:
            * Wakeonlan 1 - no delay
            * Deploy 1    - no delay
            * Deploy 2    - 2 hours

        results:
            * at t+0, [Wakeonlan 1] and [Deploy 1] tasks are generated and
            ready to be executed by the agents.
            * at t+1h, nothing to be done
            * at t+2h, [Deploy 2] is generated and ready to be executed by the
            agents.

[[!template  id=info text="""
**TODO**

* Explain in detail the delay time.
* Maybe we can use some sort of maximum duration in addition to the delay a
task in order to limit usage on certain time slots.
"""]]

### agent-driven mode (ondemand)

TaskJobs are produced more like an on-demand service:

1. Some agent asks for its tasks periodically (cf. getConfig in REST specs)
2. Server computes a list of currently available Tasks for the agent.
3. This list is filtered out by the allowed timeslot.
4. Each allowed tasks generated a corresponding taskjob and send the result to the agent.

[[!img timeslot.svg]]

The timeslot will be saved in a JSON blob like the following:

    {
      "Mo" : [
        { "start":0, "end":4 },
        { "start":19, "end":24 }
      ],
      "Tu" : [
        { "start":0, "end":4 },
        { "start":6, "end":10 },
        { "start":12, "end":16 },
        { "start":18, "end":22 }
      ],
      "We" : [
        { "start":12, "end":14 }
      ],
      "Th" : [
        { "start":8, "end":12 }
      ],
      "Fr" : [
        { "start":4, "end":12 }
      ],
      "Sa" : [
        { "start":0, "end":24 }
      ],
      "Su" : [
        { "start":0, "end":24 }
      ]
    }

## Taskjob Statuses

### legacy

* **PREPARED** : server just create the TaskJob
* **RUNNING**  : some agent gets its corresponding TaskJob
* **FINISHED** : the agent has completed its TaskJob without error
* **INERROR**  : the agent encountered some issues and stop the TaskJob with errors or TaskJob's timeout occured (crontask > 2h)

### on-demand

* **RUNNING**  : some agent gets its corresponding TaskJob
* **FINISHED** : the agent has completed its TaskJob without error
* **INERROR**  : the agent encountered some issues and stop the TaskJob with errors or TaskJob's timeout occured (crontask > 2h)

## Monitoring / Logs

* Enhance summary view with tasks related status informations like number of
discovered/inventoried devices (cf. NetDiscovery or NetInventory status) or the
number of packages deployed grouped by statuses. It looks like tasks summary
view in 0.84+1.0 but with relevant summarized details. Those details can be
refreshed dynamically on this consultation page. Each line must use the
following format :

        <task icon> - <task name> - <specific global tasks details> - [global completion percentage] - <status icon>
            + more specific task details

* Example :

        <DEPLOY icon> - Office Apps install - 80 deployments (ok: 50, ko : 12, unneeded : 3) - completion : 81 % - <RUNNING icon>
            + Total targetted devices : 40
            + LibreOffice - ok : 30, ko :  2,  unneeded : 3
            + Thunderbird - ok : 20, ko : 10,  unneeded : 0

        <NETDISCOVERY icon> - Building 42 - discoveries : (50 new devices , 100 updated devices) - completion : N/A - <FINISHED icon>
            + networking devices - 10 new devices, 5 updated devices
            + printers           - 30 new devices, 5 updated devices
            + unknown devices    - 10 new devices, 90 updated devices

        <NETINVENTORY icon> - Building 666 - targetted devices : 0 - completion : 0 % - <INERROR icon>
            + Total targets : 0
            + IP range :
                9th circle, 8th circle, 7th circle
            + Error :
                no devices found to be inventoried

* Selecting a task will switch to a more detailed view with advanced logs (jobstates filtered by the currently selected task id)

## Reporting

[[!template id=info text="""
**TODO**

* Define some use case reports for each tasks.
"""]]

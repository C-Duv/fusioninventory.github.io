Fusioninventory Plugin for GLPI - Tasks Redux

[[!toc levels=4]]

# Tasks redux : objectives

This page aims to gather objectives .

* Split and move tasks summary GUI parts into appropriate tab/screen called
  Monitoring and Reporting (like using native GLPI reporting facilities or
  mReporting optional plugin)
* Rework task summary categories and layout

[[!template id=info text="""
**TODO** We welcome any mockup and propositions.
"""]]

* Add history log on tasks.

* Externalize taskjobs reports in an independant page and base the display of
  this page on what have been done with the Deploy reports status

[[!template  id=info text="""
**TODO**

Add some mockup within this page or linked to another page if there are too many elements that makes this page unreadable.
"""]]

## TaskJob planification

### server-driven mode (legacy)

Task jobs are generated like in previous version but Task and jobs are created
and managed separately.

* Split tasks from jobs to simplify the process
    * Create a Jobs management tab outside the tasks
    * We should be able to create Jobs in task management screen (cf. Package interface)
    * Tasks are only considered as crontab-like tasks.
    * Display the jobs list line by line.
    * Create some helper class which helps to list jobs associated to some
      task. For each Jobs linked, we must have:
        * some timeout (or delay) before running a job.
        * regroup every job by starting time.

* Jobstates are generated according to their delay and in the resultant order :

        example:
            * Wakeonlan 1 - no delay
            * Deploy 1    - no delay
            * Deploy 2    - 2 hours

        results:
            * at t+0, [Wakeonlan 1] and [Deploy 1] tasks are generated and ready to be executed by the agents.
            * at t+1h, nothing to be done
            * at t+2h, [Deploy 2] is generated and ready to be executed by the agents.

[[!template  id=info text="""
**TODO**

* Explain in detail the delay time.
* Maybe we can use some sort of maximum duration in addition to the delay a
task in order to limit usage on certain time slots.
"""]]

### agent-driven mode (ondemand)

Taskjob are produced more like an on-demand service. Agents ask for their task at periodic time (cf. getConfig in REST specs) and the Tasks create the authorized Jobs according to the time slot configured.

[[!template id=info text="""
**TODO**

* Explain with some graphics (and obviously some text :P ) how a job is created from a task driven by time slots.
"""]]

[[!graph src="""
    {
        ranksep=.25;
        overlap=false;
        node [shape=plaintext, fontsize=10, color=grey, label="\N"];
        edge [arrowhead=none, style=filled, color=grey];
        "9to10" [shape=record, label="{<q1>|<q2>|<q3>|<q4>}"];
        "10to11" [shape=record, label="{<q1>|<q2>|<q3>|<q4>}"];
        "11to12" [shape=record, label="{<q1>|<q2>|<q3>|<q4>}"];

        "9:00" -> "9to10" -> "10:00" -> "10to11" -> "11:00" -> "11to12" -> "12:00" ;

        edge [arrowhead=none, style=filled, color=grey, style=filled];
        node [shape=point, fontsize=10, color=grey];
        SRV_h9q1 -> SRV_h9q2;
        SRV_h9q2 -> SRV_h9q3;
        SRV_h9q3 -> SRV_h9q4;
        SRV_h9q4 -> SRV_h10q1;
        SRV_h10q1 -> SRV_h10q2;
        SRV_h10q2 -> SRV_h10q3;
        SRV_h10q3 -> SRV_h10q4;
        SRV_h10q4 -> SRV_h11q1;
        SRV_h11q1 -> SRV_h11q2;
        SRV_h11q2 -> SRV_h11q3;
        SRV_h11q3 -> SRV_h11q4;
        SRV_h11q4 -> SRV_h12q1;

        AGENT1_h9q1 -> AGENT1_h9q2;
        AGENT1_h9q2 -> AGENT1_h9q3;
        AGENT1_h9q3 -> AGENT1_h9q4;
        AGENT1_h9q4 -> AGENT1_h10q1;
        AGENT1_h10q1 -> AGENT1_h10q2;
        AGENT1_h10q2 -> AGENT1_h10q3;
        AGENT1_h10q3 -> AGENT1_h10q4;
        AGENT1_h10q4 -> AGENT1_h11q1;
        AGENT1_h11q1 -> AGENT1_h11q2;
        AGENT1_h11q2 -> AGENT1_h11q3;
        AGENT1_h11q3 -> AGENT1_h11q4;
        AGENT1_h11q4 -> AGENT1_h12q1;


/*        { rank = same; "9:00";  SRV_h9q1;  }*/
        { rank = same; "9to10":q1;  SRV_h9q1;  }
        { rank = same; "9to10":q2;  SRV_h9q2;  }
        { rank = same; "9to10":q3;  SRV_h9q3;  }
        { rank = same; "9to10":q4;  SRV_h9q4;  }

    }
"""]]


[[!graph src="""
    ranksep=.1; size = "7.5,7.5";
    node [fontsize=10, shape=point, color=grey,  label=""];
    edge [arrowhead=none, style=filled, color=grey];

    AM_PCL -> SVCTRL [style=invis]
    SVCTRL -> SVADM [style=invis]
    SVADM -> SOCK [style=invis]
    SOCK -> VSP_COM [style=invis]

   /**
    * AM_PCL
    **/
    AM_PCL [color=black, shape=box, label="AM_PCL"];
    AM_PCL -> AM_PCL10;
    AM_PCL10 -> AM_PCL11;
    AM_PCL11 -> AM_PCL12;
    AM_PCL12 -> AM_PCL13;
    AM_PCL13 -> AM_PCL14;
    AM_PCL14 -> AM_PCL15;
    AM_PCL15 -> AM_PCL16;
    AM_PCL16 -> AM_PCL17;
    AM_PCL17 -> AM_PCL18;
    AM_PCL18 -> AM_PCL19;
    AM_PCL19 -> AM_PCL20;

   /**
    * SVCTRL
    **/
    SVCTRL [color=black, shape=box, label="SVCTRL"];
    SVCTRL -> SVCTRL10;
    SVCTRL10 -> SVCTRL11;
    SVCTRL11 -> SVCTRL12;
    SVCTRL12 -> SVCTRL13;
    SVCTRL13 -> SVCTRL14;
    SVCTRL14 -> SVCTRL15;
    SVCTRL15 -> SVCTRL16;
    SVCTRL16 -> SVCTRL17;
    SVCTRL17 -> SVCTRL18;
    SVCTRL18 -> SVCTRL19;
    SVCTRL19 -> SVCTRL20;

   /**
    * SVADM
    **/
    SVADM [color=black, shape=box, label="SVADM"];
    SVADM -> SVADM10;
    SVADM10 -> SVADM11;
    SVADM11 -> SVADM12;
    SVADM12 -> SVADM13;
    SVADM13 -> SVADM14;
    SVADM14 -> SVADM15;
    SVADM15 -> SVADM16;
    SVADM16 -> SVADM17;
    SVADM17 -> SVADM18;
    SVADM18 -> SVADM19;
    SVADM19 -> SVADM20;

   /**
    * SOCK
    **/
    SOCK [color=black, shape=box, label="SOCK"];
    SOCK -> SOCK10;
    SOCK10 -> SOCK11;
    SOCK11 -> SOCK12;
    SOCK12 -> SOCK13;
    SOCK13 -> SOCK14;
    SOCK14 -> SOCK15;
    SOCK15 -> SOCK16;
    SOCK16 -> SOCK17;
    SOCK17 -> SOCK18;
    SOCK18 -> SOCK19;
    SOCK19 -> SOCK20;

   /**
    * VSP_COM
    **/
    VSP_COM [color=black, shape=box, label="VSP_COM"];
    VSP_COM -> VSP_COM10;
    VSP_COM10 -> VSP_COM11;
    VSP_COM11 -> VSP_COM12;
    VSP_COM12 -> VSP_COM13;
    VSP_COM13 -> VSP_COM14;
    VSP_COM14 -> VSP_COM15;
    VSP_COM15 -> VSP_COM16;
    VSP_COM16 -> VSP_COM17;
    VSP_COM17 -> VSP_COM18;
    VSP_COM18 -> VSP_COM19;
    VSP_COM19 -> VSP_COM20;

    { rank = same; AM_PCL; SVCTRL; SVADM; SOCK; VSP_COM;     }
    { rank = same; AM_PCL10; SVCTRL10; SVADM10; SOCK10; VSP_COM10;  }
    { rank = same; AM_PCL11; SVCTRL11; SVADM11; SOCK11; VSP_COM11;  }
    { rank = same; AM_PCL12; SVCTRL12; SVADM12; SOCK12; VSP_COM12;  }
    { rank = same; AM_PCL13; SVCTRL13; SVADM13; SOCK13; VSP_COM13;  }
    { rank = same; AM_PCL14; SVCTRL14; SVADM14; SOCK14; VSP_COM14;  }
    { rank = same; AM_PCL15; SVCTRL15; SVADM15; SOCK15; VSP_COM15;  }
    { rank = same; AM_PCL16; SVCTRL16; SVADM16; SOCK16; VSP_COM16;  }
    { rank = same; AM_PCL17; SVCTRL17; SVADM17; SOCK17; VSP_COM17;  }
    { rank = same; AM_PCL18; SVCTRL18; SVADM18; SOCK18; VSP_COM18;  }
    { rank = same; AM_PCL19; SVCTRL19; SVADM19; SOCK19; VSP_COM19;  }
    { rank = same; AM_PCL20; SVCTRL20; SVADM20; SOCK20; VSP_COM20;  }
    { rank = same; edge[style=invis] AM_PCL11 -> SVCTRL11 -> SVADM11 -> SOCK11 -> VSP_COM11;  }
    /*events and transitions*/
    edge [style=filled, fontsize=8, weight=0, arrowtail=none,
arrowhead=normal, color=black];
    VSP_COM10 -> SVADM11 [label="UNKNOWN"];
    SVADM11 -> SVADM11 [label="internal"];
    SOCK12 -> SVCTRL12 [labelangle=10, labeldistance=6,
taillabel="SOCK_STRING"];
    SOCK13 -> AM_PCL13 [labelangle=10, labeldistance=6,
taillabel="SOCK_STRING"];
    AM_PCL14 -> SVCTRL17 [label="UNKNOWN"];
    AM_PCL15 -> SVADM15 [labelangle=10, labeldistance=6,
taillabel="UNKNOWN"];
"""]]

## Taskjob Statuses

* RUNNING
* FINISHED
* INERROR

## Monitoring

- Enhance summary view with tasks related status informations like number of
discovered/inventoried devices (cf. NetDiscovery or NetInventory status) or the
number of packages deployed grouped by statuses. It looks like tasks summary
view in 0.84+1.0 but with relevant summarized details. Those details can be
refreshed dynamically on this consultation page. Each line must use the
following format :

        <task icon> - <task name> - <specific global tasks details> - [global completion percentage] - <status icon>
            + more specific task details

* Example :

        <DEPLOY icon> - Office Apps install - 80 deployments (ok: 50, ko : 12, unneeded : 3) - completion : 81 % - <RUNNING icon>
            + Total targetted devices : 40
            + LibreOffice - ok : 30, ko :  2,  unneeded : 3
            + Thunderbird - ok : 20, ko : 10,  unneeded : 0

        <NETDISCOVERY icon> - Building 42 - discoveries : (50 new devices , 100 updated devices) - completion : N/A - <FINISHED icon>
            + networking devices - 10 new devices, 5 updated devices
            + printers           - 30 new devices, 5 updated devices
            + unknown devices    - 10 new devices, 90 updated devices

        <NETINVENTORY icon> - Building 666 - targetted devices : 0 - completion : 0 % - <INERROR icon>
            + Total targets : 0
            + IP range :
                9th circle, 8th circle, 7th circle
            + Error :
                no devices found to be inventoried

* Selecting a task will switch to a more detailed view with advanced logs (jobstates filtered by the currently selected task id)

## Reporting

[[!template id=info text="""
**TODO**

* Define some use case reports for each tasks.
* A more dynamic report system system
"""]]
